from appium.options.android import UiAutomator2Options
from appium import webdriver
from selenium.webdriver.common.action_chains import ActionChains  # W3C Actions 사용
from selenium.webdriver.common.actions.pointer_input import PointerInput  # 포인터 입력 사용
import subprocess
import time

# 성능 데이터 수집 함수 (ADB 명령어 실행)
def collect_performance_data():
    # ADB 명령어 실행 (프레임 속도 수집)
    result = subprocess.run(['adb', 'shell', 'dumpsys', 'gfxinfo', 'com.Cryptect.Mercenary'], capture_output=True, text=True)

    # 수집한 데이터를 지정된 경로에 성능 로그 파일로 저장
    log_file_path = r'C:\Users\bobGate\Downloads\테스트 자동화 로그파일\performance_data.txt'
    with open(log_file_path, 'w') as file:
        file.write(result.stdout)

    # CPU 사용량 수집 (파이프 명령어 수정)
    cpu_usage = subprocess.run('adb shell top -n 1 | grep com.Cryptect.Mercenary', capture_output=True, text=True, shell=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\nCPU 사용량: {cpu_usage.stdout}")

    # 메모리 사용량 수집
    memory_usage = subprocess.run(['adb', 'shell', 'dumpsys', 'meminfo', 'com.Cryptect.Mercenary'], capture_output=True, text=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\n메모리 사용량: {memory_usage.stdout}")

    # 배터리 사용량 수집
    battery_info = subprocess.run(['adb', 'shell', 'dumpsys', 'battery'], capture_output=True, text=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\n배터리 상태: {battery_info.stdout}")

    # 네트워크 데이터 사용량 수집
    data_usage = subprocess.run(['adb', 'shell', 'dumpsys', 'netstats'], capture_output=True, text=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\n네트워크 데이터 사용량: {data_usage.stdout}")

    # 발열 수준 수집 (파이프 명령어 수정)
    temperature_info = subprocess.run('adb shell dumpsys battery | grep temperature', capture_output=True, text=True, shell=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\n기기 발열(온도): {temperature_info.stdout}")

    # 프레임 드롭 발생 빈도 수집 (파이프 명령어 수정)
    frame_drop_info = subprocess.run('adb shell dumpsys gfxinfo com.Cryptect.Mercenary | grep Janky', capture_output=True, text=True, shell=True)
    with open(log_file_path, 'a') as file:
        file.write(f"\n프레임 드롭 빈도: {frame_drop_info.stdout}")

# 스크린샷 촬영 함수
def take_screenshot(driver, issue_desc):
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_path = f'C:/Users/bobGate/Downloads/테스트 자동화 로그파일/screenshot_{issue_desc}_{timestamp}.png'
    driver.save_screenshot(screenshot_path)
    print(f"특이사항 발생: {issue_desc}, 스크린샷 저장 위치: {screenshot_path}")

# 특이사항 체크 함수
def check_for_anomalies():
    # FPS, CPU, 메모리 등 임의로 설정한 값 기반
    fps = 25
    if fps < 30:
        take_screenshot(driver, "Low_FPS")

    cpu_usage = 92
    if cpu_usage > 90:
        take_screenshot(driver, "High_CPU_Usage")

    memory_usage = 1200
    if memory_usage > 1024:
        take_screenshot(driver, "High_Memory_Usage")

    temperature = 42
    if temperature > 40:
        take_screenshot(driver, "High_Temperature")

# Appium 옵션 설정
options = UiAutomator2Options()
options.platform_name = "Android"
options.platform_version = "13"
options.device_name = "R3CNC032JZM"
options.app_package = "com.Cryptect.Mercenary"
options.app_activity = "com.unity3d.player.UnityPlayerActivity"
options.automation_name = "UiAutomator2"
options.no_reset = True

# Appium 서버 연결
driver = webdriver.Remote('http://127.0.0.1:4723', options=options)

# 게임 실행 후 30초 동안 대기
time.sleep(30)

# 터치 액션 정의
pointer = PointerInput(PointerInput.TOUCH, "finger")
actions = ActionChains(driver)

def tap_at_coordinates(x, y):
    actions.w3c_actions.pointer_action.move_to_location(x, y)
    actions.w3c_actions.pointer_action.pointer_down()
    actions.w3c_actions.pointer_action.pointer_up()
    actions.perform()
    time.sleep(2)  # 각 단계 후 2초간 대기 

# 좌표 기반의 터치 시퀀스 실행
tap_at_coordinates(304, 879)  # 아이디 창 터치
tap_at_coordinates(1848, 417)  # 키보드 텍스트 입력창 터치

# '지우기' 반복 5회
for _ in range(5):
    tap_at_coordinates(2119, 926)  # 지우기

# 텍스트 입력 (좌표 기반)
tap_at_coordinates(1607, 926)  # B 입력
tap_at_coordinates(2076, 826)  # L 입력
tap_at_coordinates(1607, 926)  # B 입력
tap_at_coordinates(2155, 645)  # 0 입력
tap_at_coordinates(291, 645)  # 1 입력
tap_at_coordinates(291, 645)  # 1 입력
tap_at_coordinates(2165, 413)  # 확인 터치
tap_at_coordinates(529, 922)  # 로그인 터치
tap_at_coordinates(529, 922)  # 로그인 한번 더 터치

# 30초 대기
time.sleep(30)

# 공지 및 창 닫기 시퀀스
tap_at_coordinates(1937, 99)  # 공지 닫기
tap_at_coordinates(1150, 813)  # 오프라인 보상 획득
tap_at_coordinates(1150, 813)  # 재화창 닫기
tap_at_coordinates(162, 56)  # 프로필 열기
tap_at_coordinates(1904, 119)  # 프로필 닫기
tap_at_coordinates(208, 380)  # 시즌 정보 열기
tap_at_coordinates(1792, 149)  # 시즌 정보 닫기
tap_at_coordinates(112, 552)  # 퀘스트 열기
tap_at_coordinates(2245, 46)  # 퀘스트 닫기
tap_at_coordinates(119, 701)  # 랭킹 열기
tap_at_coordinates(2245, 46)  # 랭킹 닫기

# 이벤트 관련 시퀀스
tap_at_coordinates(2013, 635)  # 이벤트 열기
time.sleep(5)  # 5초 대기
tap_at_coordinates(1993, 165)  # 이벤트 닫기
tap_at_coordinates(2188, 635)  # 패스 열기
tap_at_coordinates(2245, 46)  # 패스 닫기
tap_at_coordinates(2010, 810)  # 한정 패스 열기
tap_at_coordinates(2245, 46)  # 한정 닫기

# 상점 관련 시퀀스
tap_at_coordinates(2188, 813)  # 상점 열기
tap_at_coordinates(202, 278)  # 상점 한정 패키지 탭
tap_at_coordinates(202, 380)  # 패키지 탭
tap_at_coordinates(202, 489)  # 성장 패키지 탭
tap_at_coordinates(202, 598)  # 특별 재화 탭
tap_at_coordinates(2245, 46)  # 상점 닫기

# 소환 관련 시퀀스
tap_at_coordinates(787, 1045)  # 소환 진입
tap_at_coordinates(1643, 1005)  # 픽업 캐릭터 10회 소환
tap_at_coordinates(2218, 69)  # 소환 건너뛰기
tap_at_coordinates(2218, 69)  # 소환 건너뛰기
tap_at_coordinates(2245, 46)  # 소환 닫기
tap_at_coordinates(2245, 46)  # 소환 아예 닫기

# 용병단 관련 시퀀스
tap_at_coordinates(1174, 1045)  # 용병단 팝업
tap_at_coordinates(374, 288)  # 장비 세팅
tap_at_coordinates(374, 400)  # 크리처
time.sleep(10)  # 10초 대기
tap_at_coordinates(374, 509)  # 태초의 코어
tap_at_coordinates(374, 608)  # 단장 스킬
tap_at_coordinates(374, 714)  # 용병단 랭크
tap_at_coordinates(374, 813)  # 배낭
tap_at_coordinates(374, 922)  # 캐릭터

# 모험 관련 시퀀스
tap_at_coordinates(1940, 1045)  # 모험
tap_at_coordinates(2053, 66)  # 포탈
tap_at_coordinates(919, 608)  # 스토리
tap_at_coordinates(1775, 969)  # 소탕 버튼 터치
tap_at_coordinates(1154, 721)  # 소탕
tap_at_coordinates(1154, 721)  # 보상 팝업 종료
tap_at_coordinates(2245, 46)  # 스토리 닫기

# 탐험 관련 시퀀스
tap_at_coordinates(2053, 66)  # 포탈
tap_at_coordinates(1392, 407)  # 탐험
tap_at_coordinates(1848, 1015)  # 소탕 버튼 터치
tap_at_coordinates(1154, 721)  # 소탕
tap_at_coordinates(1154, 721)  # 보상 팝업 종료
tap_at_coordinates(2245, 46)  # 탐험 닫기

# 챌린지 관련 시퀀스
tap_at_coordinates(2053, 66)  # 포탈
tap_at_coordinates(1861, 410)  # 챌린지
tap_at_coordinates(2129, 1015)  # 챌린지 도전

# 6000초 동안 카운트다운 (60초마다 남은 시간 출력)
remaining_time = 6000  # 총 대기 시간 (초)

while remaining_time > 0:
    print(f"남은 대기 시간: {remaining_time}초")
    time.sleep(60)  # 60초 대기
    remaining_time -= 60  # 60초 차감

# 대기 종료 후 마지막으로 0초 출력
print("대기 종료: 남은 시간 0초")

# 성능 데이터 수집
collect_performance_data()

# 특이사항 체크
check_for_anomalies()

# Appium 종료
driver.quit()
