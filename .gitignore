from appium.options.android import UiAutomator2Options
from appium import webdriver
from selenium.webdriver.common.action_chains import ActionChains  # W3C Actions 사용
from selenium.webdriver.common.actions.pointer_input import PointerInput  # 포인터 입력 사용
import subprocess
import time

# 성능 데이터 수집 함수 (ADB 명령어 실행)
def collect_performance_data():
    # ADB 명령어 실행 (프레임 속도 수집)
    result = subprocess.run(['adb', 'shell', 'dumpsys', 'gfxinfo', 'com.Cryptect.Mercenary'], capture_output=True, text=True)
    
    # 수집한 데이터를 지정된 경로에 성능 로그 파일로 저장
    log_file_path = r'C:\Users\bobGate\Downloads\테스트 자동화 로그파일\performance_data.txt'  # 파일 경로
    with open(log_file_path, 'w') as file:
        file.write(result.stdout)

# Appium 옵션 설정 (capabilities)
options = UiAutomator2Options()
options.platform_name = "Android"
options.platform_version = "13"  # 실제 기기 Android 버전
options.device_name = "R3CNC032JZM"  # ADB로 확인한 실제 기기명
options.app_package = "com.Cryptect.Mercenary"  # 게임의 패키지 이름
options.app_activity = "com.unity3d.player.UnityPlayerActivity"  # 메인 액티비티
options.automation_name = "UiAutomator2"  # Android 자동화 프레임워크
options.no_reset = True  # 앱 데이터를 리셋하지 않음

# Appium 서버 연결 (루트 경로 사용)
driver = webdriver.Remote('http://127.0.0.1:4723', options=options)

# 게임 실행 후 30초 동안 대기
time.sleep(30)

# 포인터 액션 정의 (터치 기반 이벤트)
pointer = PointerInput(PointerInput.TOUCH, "finger")
actions = ActionChains(driver)

# 터치 액션 정의 (각 좌표에서 수행)
def tap_at_coordinates(x, y):
    actions.w3c_actions.pointer_action.move_to_location(x, y)
    actions.w3c_actions.pointer_action.pointer_down()
    actions.w3c_actions.pointer_action.pointer_up()
    actions.perform()

# 1. X 232 / Y 897 터치
tap_at_coordinates(232, 897)
time.sleep(5)  # 5초 대기

# 2. X 892 / Y 405 터치
tap_at_coordinates(892, 405)
time.sleep(5)  # 5초 대기

# 3. X 2133 / Y 925 20번 터치
for _ in range(20):
    tap_at_coordinates(2133, 925)
    time.sleep(5)  # 5초 대기

# 4. X 1622 / Y 929 터치
tap_at_coordinates(1622, 929)
time.sleep(5)  # 5초 대기

# 5. X 2083 / Y 829 터치
tap_at_coordinates(2083, 829)
time.sleep(5)  # 5초 대기

# 6. X 1622 / Y 929 터치
tap_at_coordinates(1622, 929)
time.sleep(5)  # 5초 대기

# 7. X 2163 / Y 650 터치
tap_at_coordinates(2163, 650)
time.sleep(5)  # 5초 대기

# 8. X 285 / Y 650 터치
tap_at_coordinates(285, 650)
time.sleep(5)  # 5초 대기

# 9. X 2176 / Y 411 터치
tap_at_coordinates(2176, 411)
time.sleep(5)  # 5초 대기

# 10. X 521 / Y 929 터치
tap_at_coordinates(521, 929)
time.sleep(5)  # 5초 대기

# 11. X 521 / Y 929 터치 (다시 터치)
tap_at_coordinates(521, 929)
time.sleep(30)  # 30초 대기

# 12. X 1924 / Y 1048 터치
tap_at_coordinates(1924, 1048)

# 600초 동안 카운트다운 (60초마다 남은 시간 출력)
remaining_time = 600
while remaining_time > 0:
    time.sleep(60)
    remaining_time -= 60
    print(f"남은 시간: {remaining_time}초")

# 성능 데이터 수집 함수 실행
collect_performance_data()

# 테스트 종료 (Appium 세션 종료)
driver.quit()
