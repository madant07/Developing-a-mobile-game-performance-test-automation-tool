function formatData() {
  // 데이터가 있는 시트를 가져옵니다.
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  
  // A1:A 범위에서 데이터를 가져옵니다.
  const rawData = sheet.getRange('A1:A').getValues();
  
  // 데이터를 가공하여 C1:C 범위에 삽입할 배열을 만듭니다.
  const formattedData = [];
  let appInfo = '', frameStats = '', delayStats = '', histogram = '', cpuGpuStats = '', gpuHistogram = '', viewHierarchy = '', displayInfo = '';

  rawData.forEach(row => {
    const line = row[0].trim();

    if (line.includes("Graphics info for pid")) {
      appInfo = `1. 애플리케이션 정보\nPID: ${line.match(/pid (\d+)/)[1]}\n패키지명: ${line.match(/\[(.*)\]/)[1]}`;
    }
    
    if (line.includes("Pipeline")) {
      appInfo += `\n그래픽 파이프라인: ${line.split('=')[1].trim()}`;
    }

    if (line.includes("Total frames rendered")) {
      frameStats = `2. 프레임 렌더링 통계\n총 렌더링된 프레임: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Janky frames")) {
      frameStats += `\nJanky 프레임: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("50th percentile")) {
      frameStats += `\n50번째 백분위수: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("90th percentile")) {
      frameStats += `\n90번째 백분위수: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("95th percentile")) {
      frameStats += `\n95번째 백분위수: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("99th percentile")) {
      frameStats += `\n99번째 백분위수: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Number Missed Vsync")) {
      delayStats = `3. 지연 원인 통계\nMissed Vsync: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("High input latency")) {
      delayStats += `\nHigh input latency: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Slow UI thread")) {
      delayStats += `\nSlow UI thread: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Slow bitmap uploads")) {
      delayStats += `\nSlow bitmap uploads: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Frame deadline missed")) {
      delayStats += `\nFrame deadline missed: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("HISTOGRAM")) {
      histogram = `4. 히스토그램 (프레임 시간 분포)\n${line.replace('HISTOGRAM:', '').trim()}`;
    }

    if (line.includes("CPU Caches:")) {
      cpuGpuStats = `5. CPU와 GPU 통계\nCPU 캐시 메모리: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Glyph Cache")) {
      cpuGpuStats += `\nGlyph Cache: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Total CPU memory usage")) {
      cpuGpuStats += `\n총 CPU 메모리 사용량: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Total GPU memory usage")) {
      cpuGpuStats += `\n총 GPU 메모리 사용량: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("GPU HISTOGRAM")) {
      gpuHistogram = `6. GPU 렌더링 시간 분포\n${line.replace('GPU HISTOGRAM:', '').trim()}`;
    }

    if (line.includes("View hierarchy")) {
      viewHierarchy = `7. View Hierarchy 정보`;
    }

    if (line.includes("Total ViewRootImpl")) {
      viewHierarchy += `\n총 ViewRootImpl: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Total attached Views")) {
      viewHierarchy += `\n총 View 수: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("Total RenderNode")) {
      viewHierarchy += `\n총 RenderNode 메모리 사용량: ${line.split(':')[1].trim()}`;
    }

    if (line.includes("ProcessConfig")) {
      displayInfo = `8. 디바이스 화면 정보\n화면 해상도: ${line.match(/mBounds=Rect\((\d+), (\d+) - (\d+), (\d+)\)/).slice(3, 5).join(' x ')}\n디스플레이 회전: ${line.match(/ROTATION_(\d+)/)[1]}도`;
    }
  });

  formattedData.push([appInfo]);
  formattedData.push([frameStats]);
  formattedData.push([delayStats]);
  formattedData.push([histogram]);
  formattedData.push([cpuGpuStats]);
  formattedData.push([gpuHistogram]);
  formattedData.push([viewHierarchy]);
  formattedData.push([displayInfo]);

  // C1:C에 데이터를 넣습니다.
  sheet.getRange(1, 3, formattedData.length, 1).setValues(formattedData);
}
